
PreLaboratorio_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000256  000002ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000256  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800110  00800110  000002fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000032c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008af  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006fe  00000000  00000000  00000c5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003bf  00000000  00000000  00001359  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  00001718  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000443  00000000  00000000  000017a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e8  00000000  00000000  00001be7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001dcf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 75 00 	jmp	0xea	; 0xea <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e5       	ldi	r30, 0x56	; 86
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 31       	cpi	r26, 0x15	; 21
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 bf 00 	call	0x17e	; 0x17e <main>
  9e:	0c 94 29 01 	jmp	0x252	; 0x252 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <configurar_ADC>:
	0x86, // E: 1 0 0 0 0 1 1 (0x61 invertido)
	0x8E  // F: 1 0 0 0 1 1 1 (0x71 invertido)
};

void configurar_ADC() {
	ADMUX = (1 << REFS0) | (1 << ADLAR) | POTENCIOMETRO; // ADC7 (A7)
  a6:	87 e6       	ldi	r24, 0x67	; 103
  a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  ac:	87 e8       	ldi	r24, 0x87	; 135
  ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  b2:	08 95       	ret

000000b4 <leer_ADC>:
}

uint8_t leer_ADC() {
	ADCSRA |= (1 << ADSC);
  b4:	ea e7       	ldi	r30, 0x7A	; 122
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	80 64       	ori	r24, 0x40	; 64
  bc:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
  be:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  c2:	86 fd       	sbrc	r24, 6
  c4:	fc cf       	rjmp	.-8      	; 0xbe <leer_ADC+0xa>
	return ADCH;
  c6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  ca:	08 95       	ret

000000cc <configurar_timer>:

void configurar_timer() {
	TCCR1A = 0;
  cc:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM12) | (1 << CS12) | (1 << CS10);
  d0:	8d e0       	ldi	r24, 0x0D	; 13
  d2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	OCR1A = 156;
  d6:	8c e9       	ldi	r24, 0x9C	; 156
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  de:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 = (1 << OCIE1A);
  e2:	82 e0       	ldi	r24, 0x02	; 2
  e4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
  e8:	08 95       	ret

000000ea <__vector_11>:
}

ISR(TIMER1_COMPA_vect) {
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	2f 93       	push	r18
  f6:	3f 93       	push	r19
  f8:	8f 93       	push	r24
  fa:	9f 93       	push	r25
  fc:	ef 93       	push	r30
  fe:	ff 93       	push	r31
	uint8_t segmentos = tabla_7seg[digitos[digito_actual]];
 100:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	ed 5e       	subi	r30, 0xED	; 237
 108:	fe 4f       	sbci	r31, 0xFE	; 254
 10a:	e0 81       	ld	r30, Z
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	e0 50       	subi	r30, 0x00	; 0
 110:	ff 4f       	sbci	r31, 0xFF	; 255
 112:	80 81       	ld	r24, Z
	
	// Control de segmentos (activar en LOW)
	PORTB = (PORTB & 0x1F) | ((segmentos & 0x01) << 5); // a (PB5)
 114:	95 b1       	in	r25, 0x05	; 5
 116:	28 2f       	mov	r18, r24
 118:	21 70       	andi	r18, 0x01	; 1
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	22 0f       	add	r18, r18
 11e:	33 1f       	adc	r19, r19
 120:	22 95       	swap	r18
 122:	32 95       	swap	r19
 124:	30 7f       	andi	r19, 0xF0	; 240
 126:	32 27       	eor	r19, r18
 128:	20 7f       	andi	r18, 0xF0	; 240
 12a:	32 27       	eor	r19, r18
 12c:	9f 71       	andi	r25, 0x1F	; 31
 12e:	29 2b       	or	r18, r25
 130:	25 b9       	out	0x05, r18	; 5
	PORTC = (segmentos >> 1) & 0x3F; // b-g (PC0-PC5)
 132:	86 95       	lsr	r24
 134:	8f 73       	andi	r24, 0x3F	; 63
 136:	88 b9       	out	0x08, r24	; 8
	
	// Multiplexación de dígitos (activar en HIGH para ánodo común)
	if (digito_actual == 0) {
 138:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 13c:	81 11       	cpse	r24, r1
 13e:	07 c0       	rjmp	.+14     	; 0x14e <__vector_11+0x64>
		PORTB |= (1 << DIGITO1);
 140:	85 b1       	in	r24, 0x05	; 5
 142:	84 60       	ori	r24, 0x04	; 4
 144:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1 << DIGITO2);
 146:	85 b1       	in	r24, 0x05	; 5
 148:	87 7f       	andi	r24, 0xF7	; 247
 14a:	85 b9       	out	0x05, r24	; 5
 14c:	06 c0       	rjmp	.+12     	; 0x15a <__vector_11+0x70>
		} else {
		PORTB |= (1 << DIGITO2);
 14e:	85 b1       	in	r24, 0x05	; 5
 150:	88 60       	ori	r24, 0x08	; 8
 152:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1 << DIGITO1);
 154:	85 b1       	in	r24, 0x05	; 5
 156:	8b 7f       	andi	r24, 0xFB	; 251
 158:	85 b9       	out	0x05, r24	; 5
	}
	digito_actual = !digito_actual;
 15a:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <__data_end>
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	91 11       	cpse	r25, r1
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
}
 168:	ff 91       	pop	r31
 16a:	ef 91       	pop	r30
 16c:	9f 91       	pop	r25
 16e:	8f 91       	pop	r24
 170:	3f 91       	pop	r19
 172:	2f 91       	pop	r18
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <main>:

int main() {
	DDRD = 0xFF;   // LEDs contador (PD0-PD7)
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1 << DIGITO1) | (1 << DIGITO2) | (1 << ALARMA) | (1 << PB5);
 182:	84 b1       	in	r24, 0x04	; 4
 184:	8c 63       	ori	r24, 0x3C	; 60
 186:	84 b9       	out	0x04, r24	; 4
	DDRC |= 0x3F;  // Segmentos b-g (PC0-PC5)
 188:	87 b1       	in	r24, 0x07	; 7
 18a:	8f 63       	ori	r24, 0x3F	; 63
 18c:	87 b9       	out	0x07, r24	; 7
	
	// Pull-ups para botones
	PORTB |= (1 << INC_PIN) | (1 << DEC_PIN);
 18e:	85 b1       	in	r24, 0x05	; 5
 190:	83 60       	ori	r24, 0x03	; 3
 192:	85 b9       	out	0x05, r24	; 5
	
	configurar_ADC();
 194:	0e 94 53 00 	call	0xa6	; 0xa6 <configurar_ADC>
	configurar_timer();
 198:	0e 94 66 00 	call	0xcc	; 0xcc <configurar_timer>
	sei();
 19c:	78 94       	sei
	
	uint8_t estado_inc = 1, estado_dec = 1;
 19e:	51 e0       	ldi	r21, 0x01	; 1
 1a0:	41 e0       	ldi	r20, 0x01	; 1
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <main+0x2a>
 1a4:	4d 2f       	mov	r20, r29
 1a6:	5c 2f       	mov	r21, r28
	
	while(1) {
		// Antirebote
		uint8_t inc_actual = !(PINB & (1 << INC_PIN));
 1a8:	83 b1       	in	r24, 0x03	; 3
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	38 2f       	mov	r19, r24
 1ae:	31 70       	andi	r19, 0x01	; 1
 1b0:	80 fd       	sbrc	r24, 0
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	d9 2f       	mov	r29, r25
		uint8_t dec_actual = !(PINB & (1 << DEC_PIN));
 1b6:	83 b1       	in	r24, 0x03	; 3
 1b8:	82 70       	andi	r24, 0x02	; 2
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	21 e0       	ldi	r18, 0x01	; 1
 1be:	00 97       	sbiw	r24, 0x00	; 0
 1c0:	09 f0       	breq	.+2      	; 0x1c4 <main+0x46>
 1c2:	20 e0       	ldi	r18, 0x00	; 0
 1c4:	c2 2f       	mov	r28, r18
		
		if (inc_actual && !estado_inc) {
 1c6:	31 11       	cpse	r19, r1
 1c8:	12 c0       	rjmp	.+36     	; 0x1ee <main+0x70>
 1ca:	41 11       	cpse	r20, r1
 1cc:	10 c0       	rjmp	.+32     	; 0x1ee <main+0x70>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ce:	2f ef       	ldi	r18, 0xFF	; 255
 1d0:	39 ef       	ldi	r19, 0xF9	; 249
 1d2:	40 e0       	ldi	r20, 0x00	; 0
 1d4:	21 50       	subi	r18, 0x01	; 1
 1d6:	30 40       	sbci	r19, 0x00	; 0
 1d8:	40 40       	sbci	r20, 0x00	; 0
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <main+0x56>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <main+0x60>
 1de:	00 00       	nop
			_delay_ms(20);
			if (!(PINB & (1 << INC_PIN))) contador++;
 1e0:	18 99       	sbic	0x03, 0	; 3
 1e2:	05 c0       	rjmp	.+10     	; 0x1ee <main+0x70>
 1e4:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <contador>
 1e8:	2f 5f       	subi	r18, 0xFF	; 255
 1ea:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <contador>
		}
		estado_inc = inc_actual;
		
		if (dec_actual && !estado_dec) {
 1ee:	89 2b       	or	r24, r25
 1f0:	91 f4       	brne	.+36     	; 0x216 <main+0x98>
 1f2:	51 11       	cpse	r21, r1
 1f4:	10 c0       	rjmp	.+32     	; 0x216 <main+0x98>
 1f6:	8f ef       	ldi	r24, 0xFF	; 255
 1f8:	99 ef       	ldi	r25, 0xF9	; 249
 1fa:	20 e0       	ldi	r18, 0x00	; 0
 1fc:	81 50       	subi	r24, 0x01	; 1
 1fe:	90 40       	sbci	r25, 0x00	; 0
 200:	20 40       	sbci	r18, 0x00	; 0
 202:	e1 f7       	brne	.-8      	; 0x1fc <main+0x7e>
 204:	00 c0       	rjmp	.+0      	; 0x206 <main+0x88>
 206:	00 00       	nop
			_delay_ms(20);
			if (!(PINB & (1 << DEC_PIN))) contador--;
 208:	19 99       	sbic	0x03, 1	; 3
 20a:	05 c0       	rjmp	.+10     	; 0x216 <main+0x98>
 20c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <contador>
 210:	81 50       	subi	r24, 0x01	; 1
 212:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <contador>
		}
		estado_dec = dec_actual;
		
		// Actualizar LEDs
		PORTD = contador;
 216:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <contador>
 21a:	8b b9       	out	0x0b, r24	; 11
		
		// Procesar ADC
		valor_adc = leer_ADC();
 21c:	0e 94 5a 00 	call	0xb4	; 0xb4 <leer_ADC>
 220:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <valor_adc>
		digitos[0] = (valor_adc >> 4) & 0x0F;
 224:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <valor_adc>
 228:	82 95       	swap	r24
 22a:	8f 70       	andi	r24, 0x0F	; 15
 22c:	e3 e1       	ldi	r30, 0x13	; 19
 22e:	f1 e0       	ldi	r31, 0x01	; 1
 230:	80 83       	st	Z, r24
		digitos[1] = valor_adc & 0x0F;
 232:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <valor_adc>
 236:	8f 70       	andi	r24, 0x0F	; 15
 238:	81 83       	std	Z+1, r24	; 0x01
		
		// Ejemplo: Activar alarma si ADC > 200
		if (valor_adc > 200) PORTB |= (1 << ALARMA);
 23a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <valor_adc>
 23e:	89 3c       	cpi	r24, 0xC9	; 201
 240:	20 f0       	brcs	.+8      	; 0x24a <main+0xcc>
 242:	85 b1       	in	r24, 0x05	; 5
 244:	80 61       	ori	r24, 0x10	; 16
 246:	85 b9       	out	0x05, r24	; 5
 248:	ad cf       	rjmp	.-166    	; 0x1a4 <main+0x26>
		else PORTB &= ~(1 << ALARMA);
 24a:	85 b1       	in	r24, 0x05	; 5
 24c:	8f 7e       	andi	r24, 0xEF	; 239
 24e:	85 b9       	out	0x05, r24	; 5
 250:	a9 cf       	rjmp	.-174    	; 0x1a4 <main+0x26>

00000252 <_exit>:
 252:	f8 94       	cli

00000254 <__stop_program>:
 254:	ff cf       	rjmp	.-2      	; 0x254 <__stop_program>
