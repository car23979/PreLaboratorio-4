
PreLaboratorio_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007da  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b3  00000000  00000000  00000a1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002f1  00000000  00000000  000010d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  000013c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ea  00000000  00000000  00001408  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000120  00000000  00000000  000017f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001912  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  88:	0c 94 95 00 	jmp	0x12a	; 0x12a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <configurar_puertos>:
#define DEC_PIN    PB1

volatile uint8_t contador = 0;

void configurar_puertos() {
	DDRD = 0xFF;    // Todos los pines D como salidas
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	8a b9       	out	0x0a, r24	; 10
	DDRB &= ~((1 << INC_PIN) | (1 << DEC_PIN)); // PB0 y PB1 como entradas
  94:	84 b1       	in	r24, 0x04	; 4
  96:	8c 7f       	andi	r24, 0xFC	; 252
  98:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << INC_PIN) | (1 << DEC_PIN);   // Pull-ups activados
  9a:	85 b1       	in	r24, 0x05	; 5
  9c:	83 60       	ori	r24, 0x03	; 3
  9e:	85 b9       	out	0x05, r24	; 5
  a0:	08 95       	ret

000000a2 <actualizar_leds>:
}

void actualizar_leds() {
	PORTD = contador;
  a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  a6:	8b b9       	out	0x0b, r24	; 11
  a8:	08 95       	ret

000000aa <main>:
}

int main() {
	configurar_puertos();
  aa:	0e 94 48 00 	call	0x90	; 0x90 <configurar_puertos>
	uint8_t estado_inc = 1, estado_dec = 1;
  ae:	51 e0       	ldi	r21, 0x01	; 1
  b0:	41 e0       	ldi	r20, 0x01	; 1

	while(1) {
		uint8_t inc_actual = !(PINB & (1 << INC_PIN));
  b2:	93 b1       	in	r25, 0x03	; 3
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	39 2f       	mov	r19, r25
  b8:	31 70       	andi	r19, 0x01	; 1
  ba:	90 fd       	sbrc	r25, 0
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	d8 2f       	mov	r29, r24
		uint8_t dec_actual = !(PINB & (1 << DEC_PIN));  // Variable ahora usada
  c0:	83 b1       	in	r24, 0x03	; 3
  c2:	82 70       	andi	r24, 0x02	; 2
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	00 97       	sbiw	r24, 0x00	; 0
  ca:	09 f0       	breq	.+2      	; 0xce <main+0x24>
  cc:	20 e0       	ldi	r18, 0x00	; 0
  ce:	c2 2f       	mov	r28, r18

		// Lógica para incremento
		if (inc_actual && !estado_inc) {
  d0:	31 11       	cpse	r19, r1
  d2:	12 c0       	rjmp	.+36     	; 0xf8 <main+0x4e>
  d4:	41 11       	cpse	r20, r1
  d6:	10 c0       	rjmp	.+32     	; 0xf8 <main+0x4e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	2f ef       	ldi	r18, 0xFF	; 255
  da:	39 ef       	ldi	r19, 0xF9	; 249
  dc:	40 e0       	ldi	r20, 0x00	; 0
  de:	21 50       	subi	r18, 0x01	; 1
  e0:	30 40       	sbci	r19, 0x00	; 0
  e2:	40 40       	sbci	r20, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <main+0x34>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x3e>
  e8:	00 00       	nop
			_delay_ms(20);
			if (!(PINB & (1 << INC_PIN))) {
  ea:	18 99       	sbic	0x03, 0	; 3
  ec:	05 c0       	rjmp	.+10     	; 0xf8 <main+0x4e>
				contador++;
  ee:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f2:	2f 5f       	subi	r18, 0xFF	; 255
  f4:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
			}
		}
		estado_inc = inc_actual;

		// Lógica para decremento (corregido)
		if (dec_actual && !estado_dec) {  // Ahora usa las variables correctas
  f8:	89 2b       	or	r24, r25
  fa:	91 f4       	brne	.+36     	; 0x120 <main+0x76>
  fc:	51 11       	cpse	r21, r1
  fe:	10 c0       	rjmp	.+32     	; 0x120 <main+0x76>
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	99 ef       	ldi	r25, 0xF9	; 249
 104:	20 e0       	ldi	r18, 0x00	; 0
 106:	81 50       	subi	r24, 0x01	; 1
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	20 40       	sbci	r18, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <main+0x5c>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <main+0x66>
 110:	00 00       	nop
			_delay_ms(20);
			if (!(PINB & (1 << DEC_PIN))) {
 112:	19 99       	sbic	0x03, 1	; 3
 114:	05 c0       	rjmp	.+10     	; 0x120 <main+0x76>
				contador--;
 116:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 11a:	81 50       	subi	r24, 0x01	; 1
 11c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			}
		}
		estado_dec = dec_actual;  // Variable ahora usada

		actualizar_leds();
 120:	0e 94 51 00 	call	0xa2	; 0xa2 <actualizar_leds>
			_delay_ms(20);
			if (!(PINB & (1 << INC_PIN))) {
				contador++;
			}
		}
		estado_inc = inc_actual;
 124:	4d 2f       	mov	r20, r29
			_delay_ms(20);
			if (!(PINB & (1 << DEC_PIN))) {
				contador--;
			}
		}
		estado_dec = dec_actual;  // Variable ahora usada
 126:	5c 2f       	mov	r21, r28

		actualizar_leds();
	}
 128:	c4 cf       	rjmp	.-120    	; 0xb2 <main+0x8>

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
